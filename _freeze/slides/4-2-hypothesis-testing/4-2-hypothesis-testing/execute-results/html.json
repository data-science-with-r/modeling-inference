{
  "hash": "d5ea6638ed5c384d53bcb10a088b39b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bootstrapping\"\nformat: revealjs\n---\n\n\n\n# Setup\n\n## Packages\n\n- **tidyverse** for data wrangling and visualization\n- **tidymodels** for modeling\n- **openintro** for data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(openintro)\n```\n:::\n\n\n# Hypothesis testing\n\n## Hypothesis testing\n\nA hypothesis test is a statistical technique used to evaluate *competing claims* using data\n\n::: incremental\n-   **Null hypothesis,** $H_0$: An assumption about the population.\n    \"There is nothing going on.\"\n\n-   **Alternative hypothesis,** $H_A$: A research question about the population.\n    \"There is something going on\".\n:::\n\n. . .\n\nNote: Hypotheses are always at the population level!\n\n## Setting hypotheses\n\n-   **Null hypothesis,** $H_0$: \"There is nothing going on.\" The slope of the model for predicting the prices of houses in Duke Forest from their areas is 0, $\\beta_1 = 0$.\n\n-   **Alternative hypothesis,** $H_A$: \"There is something going on\".\n    The slope of the model for predicting the prices of houses in Duke Forest from their areas is different than, $\\beta_1 \\ne 0$.\n\n## Hypothesis testing \"mindset\"\n\n-   Assume you live in a world where null hypothesis is true: $\\beta_1 = 0$.\n\n-   Ask yourself how likely you are to observe the sample statistic, or something even more extreme, in this world: $P(b_1 \\leq 159.48~or~b_1 \\geq 159.48 | \\beta_1 = 0)$ = ?\n\n## Hypothesis testing as a court trial {.smaller}\n\n-   **Null hypothesis**, $H_0$: Defendant is innocent\n\n-   **Alternative hypothesis**, $H_A$: Defendant is guilty\n\n. . .\n\n-   **Present the evidence:** Collect data\n\n. . .\n\n-   **Judge the evidence:** \"Could these data plausibly have happened by chance if the null hypothesis were true?\"\n    -   Yes: Fail to reject $H_0$\n    -   No: Reject $H_0$\n\n## Hypothesis testing framework {.smaller}\n\n::: incremental\n-   Start with a null hypothesis, $H_0$, that represents the status quo\n\n-   Set an alternative hypothesis, $H_A$, that represents the research question, i.e. what we’re testing for\n\n-   Conduct a hypothesis test under the assumption that the null hypothesis is true and calculate a **p-value** (probability of observed or more extreme outcome given that the null hypothesis is true)\n\n    -   if the test results suggest that the data do not provide convincing evidence for the alternative hypothesis, stick with the null hypothesis\n    -   if they do, then reject the null hypothesis in favor of the alternative\n:::\n\n## Calculate observed slope\n\n...\nwhich we have already done:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobserved_fit <- duke_forest |>\n  specify(price ~ area) |>\n  fit()\n\nobserved_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  term      estimate\n  <chr>        <dbl>\n1 intercept  116652.\n2 area          159.\n```\n\n\n:::\n:::\n\n\n## Simulate null distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4|5|6\"}\nset.seed(12345)\nnull_dist <- duke_forest |>\n  specify(price ~ area) |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  fit()\n```\n:::\n\n\n## View null distribution {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_dist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,000 × 3\n# Groups:   replicate [1,000]\n   replicate term       estimate\n       <int> <chr>         <dbl>\n 1         1 intercept 535890.  \n 2         1 area           8.64\n 3         2 intercept 425016.  \n 4         2 area          48.5 \n 5         3 intercept 571721.  \n 6         3 area          -4.25\n 7         4 intercept 516473.  \n 8         4 area          15.6 \n 9         5 intercept 472642.  \n10         5 area          31.4 \n# ℹ 1,990 more rows\n```\n\n\n:::\n:::\n\n\n## Visualize null distribution {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_dist |>\n  filter(term == \"area\") |>\n  ggplot(aes(x = estimate)) +\n  geom_histogram(binwidth = 15)\n```\n\n::: {.cell-output-display}\n![](4-2-hypothesis-testing_files/figure-revealjs/unnamed-chunk-4-1.png){width=768}\n:::\n:::\n\n\n## Visualize null distribution (alternative)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(null_dist) +\n  shade_p_value(obs_stat = observed_fit, direction = \"two-sided\")\n```\n\n::: {.cell-output-display}\n![](4-2-hypothesis-testing_files/figure-revealjs/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\n## Get p-value {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_dist |>\n  get_p_value(obs_stat = observed_fit, direction = \"two-sided\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Please be cautious in reporting a p-value of 0. This result\nis an approximation based on the number of `reps` chosen in\nthe `generate()` step.\nℹ See `get_p_value()` (`?infer::get_p_value()`) for more\n  information.\nPlease be cautious in reporting a p-value of 0. This result\nis an approximation based on the number of `reps` chosen in\nthe `generate()` step.\nℹ See `get_p_value()` (`?infer::get_p_value()`) for more\n  information.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  term      p_value\n  <chr>       <dbl>\n1 area            0\n2 intercept       0\n```\n\n\n:::\n:::\n\n\n## Make a decision\n\n::: task\nBased on the p-value calculated, what is the conclusion of the hypothesis test?\n:::\n",
    "supporting": [
      "4-2-hypothesis-testing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}