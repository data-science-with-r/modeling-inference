{
  "hash": "2294bba0a5d8255feacfcc7e75a4af14",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bootstrapping\"\nformat: revealjs\n---\n\n\n\n# Setup\n\n## Packages\n\n- **tidyverse** for data wrangling and visualization\n- **tidymodels** for modeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\n```\n:::\n\n\n## Data: Rent in Edinburgh {.smaller}\n\nFifteen 3 bedroom flats in Edinburgh, Scotland were randomly selected on [rightmove.co.uk](https://www.rightmove.co.uk).\n\n```\nflat_id; rent; title; address\nflat_01; 825 ; 3 bedroom apartment to rent; Burnhead Grove, Edinburgh, Midlothian, EH16\nflat_02; 2400; 3 bedroom flat to rent; Simpson Loan, Quartermile, Edinburgh, EH3\nflat_03; 1900; 3 bedroom flat to rent; FETTES ROW, NEW TOWN, EH3 6SE\nflat_04; 1500; 3 bedroom apartment to rent; Eyre Crescent, Edinburgh, Midlothian\nflat_05; 3250; 3 bedroom flat to rent; Walker Street, Edinburgh\nflat_06; 2145; 3 bedroom flat to rent; George Street, City Centre, Edinburgh, EH2\nflat_07; 1500; 3 bedroom flat to rent; Waverley Place , Edinburgh EH7 5SA\nflat_08; 1950; 3 bedroom flat to rent; Drumsheugh Place, Edinburgh\nflat_09; 1725; 3 bedroom flat to rent; Crighton Place, Leith, Edinburgh, EH7\nflat_10; 2995; 3 bedroom flat to rent; Simpson Loan, Meadows, Edinburgh, EH3\nflat_11; 1400; 3 bedroom flat to rent; 42, Learmonth Court, Edinburgh EH4 1PD\nflat_12; 1995; 3 bedroom apartment to rent; Chester Street, Edinburgh, Midlothian\nflat_13; 1250; 3 bedroom duplex to rent; Elmwood Terrace, Lochend, Edinburgh, EH6\nflat_14; 1995; 3 bedroom apartment to rent; Great King Street, Edinburgh, EH3\nflat_15; 1600; 3 bedroom ground floor flat to rent; Roseneath Terrace,Edinburgh,EH9\n```\n\n## Load data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedi_3br <- read_csv2(\"data/edi-3br.csv\") # ; separated\nedi_3br\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 4\n   flat_id  rent title                               address\n   <chr>   <dbl> <chr>                               <chr>  \n 1 flat_01   825 3 bedroom apartment to rent         Burnhe…\n 2 flat_02  2400 3 bedroom flat to rent              Simpso…\n 3 flat_03  1900 3 bedroom flat to rent              FETTES…\n 4 flat_04  1500 3 bedroom apartment to rent         Eyre C…\n 5 flat_05  3250 3 bedroom flat to rent              Walker…\n 6 flat_06  2145 3 bedroom flat to rent              George…\n 7 flat_07  1500 3 bedroom flat to rent              Waverl…\n 8 flat_08  1950 3 bedroom flat to rent              Drumsh…\n 9 flat_09  1725 3 bedroom flat to rent              Cright…\n10 flat_10  2995 3 bedroom flat to rent              Simpso…\n11 flat_11  1400 3 bedroom flat to rent              42, Le…\n12 flat_12  1995 3 bedroom apartment to rent         Cheste…\n13 flat_13  1250 3 bedroom duplex to rent            Elmwoo…\n14 flat_14  1995 3 bedroom apartment to rent         Great …\n15 flat_15  1600 3 bedroom ground floor flat to rent Rosene…\n```\n\n\n:::\n:::\n\n\n## Observed sample\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](4-1-2-bootstrapping_files/figure-revealjs/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\n## Observed sample\n\n\n\nSample mean ≈ £1895\n\n<br>\n\n![](images/rent-bootsamp.png)\n\n## Bootstrap population\n\nGenerated assuming there are more flats like the ones in the observed sample... Population mean = ?\n\n![](images/rent-bootpop.png)\n\n## Bootstrapping scheme\n\n::: incremental\n1. Take a bootstrap sample - a random sample taken **with replacement** from the \noriginal sample, of the same size as the original sample\n2. Calculate the bootstrap statistic - a statistic such as mean, median, \nproportion, slope, etc. computed on the bootstrap samples\n3. Repeat steps (1) and (2) many times to create a bootstrap distribution - \na distribution of bootstrap statistics\n4. Calculate the bounds of the XX% confidence interval as the middle XX% \nof the bootstrap distribution\n:::\n\n# Bootstrapping with tidymodels\n\n## Set a seed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\n```\n:::\n\n\n## Specify the variable of interest\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nset.seed(12345)\n\nedi_3br |>\n  specify(response = rent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: rent (numeric)\n# A tibble: 15 × 1\n    rent\n   <dbl>\n 1   825\n 2  2400\n 3  1900\n 4  1500\n 5  3250\n 6  2145\n 7  1500\n 8  1950\n 9  1725\n10  2995\n11  1400\n12  1995\n13  1250\n14  1995\n15  1600\n```\n\n\n:::\n:::\n\n\n## Generate 15000 bootstrap samples\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nset.seed(12345)\n\nedi_3br |>\n  specify(response = rent) |>\n  generate(reps = 15000, type = \"bootstrap\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: rent (numeric)\n# A tibble: 225,000 × 2\n# Groups:   replicate [15,000]\n   replicate  rent\n       <int> <dbl>\n 1         1  1995\n 2         1  1900\n 3         1  2995\n 4         1  1995\n 5         1  1950\n 6         1  2995\n 7         1  1250\n 8         1  1400\n 9         1  1950\n10         1  2400\n# ℹ 224,990 more rows\n```\n\n\n:::\n:::\n\n\n## Calculate the mean of each bootstrap sample\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\nset.seed(12345)\n\nedi_3br |>\n  specify(response = rent) |>\n  generate(reps = 15000, type = \"bootstrap\") |>\n  calculate(stat = \"mean\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: rent (numeric)\n# A tibble: 15,000 × 2\n   replicate  stat\n       <int> <dbl>\n 1         1 2001 \n 2         2 1886 \n 3         3 1799.\n 4         4 1968.\n 5         5 1789 \n 6         6 2018 \n 7         7 1995.\n 8         8 1867.\n 9         9 2042 \n10        10 1776.\n# ℹ 14,990 more rows\n```\n\n\n:::\n:::\n\n\n## Save resulting bootstrap distribution\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nset.seed(12345)\n\nboot_df <- edi_3br |>\n  specify(response = rent) |>\n  generate(reps = 15000, type = \"bootstrap\") |>\n  calculate(stat = \"mean\")\n```\n:::\n\n\n## The bootstrap sample\n\n::: {.columns}\n::: {.column width=70%}\n\n::: task\nHow many observations are there in `boot_df`? What does each observation represent?\n:::\n\n:::\n::: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: rent (numeric)\n# A tibble: 15,000 × 2\n   replicate  stat\n       <int> <dbl>\n 1         1 2001 \n 2         2 1886 \n 3         3 1799.\n 4         4 1968.\n 5         5 1789 \n 6         6 2018 \n 7         7 1995.\n 8         8 1867.\n 9         9 2042 \n10        10 1776.\n# ℹ 14,990 more rows\n```\n\n\n:::\n:::\n\n\n## Visualize the bootstrap distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(boot_df)\n```\n\n::: {.cell-output-display}\n![](4-1-2-bootstrapping_files/figure-revealjs/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n## Calculate the confidence interval\n\nA 95% confidence interval is bounded by the middle 95% of the bootstrap distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nci_95 <- get_ci(\n  boot_df,\n  level = 0.95\n)\nci_95\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1     1601    2216.\n```\n\n\n:::\n:::\n\n\n## Visualize the confidence interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(boot_df) +\n  shade_ci(ci_95)\n```\n\n::: {.cell-output-display}\n![](4-1-2-bootstrapping_files/figure-revealjs/unnamed-chunk-12-1.png){width=768}\n:::\n:::\n\n\n## Interpret the confidence interval\n\n\n\n\n::: {.columns}\n::: {.column width=70%}\n\n::: task\nThe 95% confidence interval for the mean rent of three bedroom flats in Edinburgh was calculated as (1601, 2216). Which of the following is the correct interpretation of this interval?\n:::\n\n:::\n:::\n\n**(a)** 95% of the time the mean rent of three bedroom flats in this sample is between £1601 and £2216.\n\n**(b)** 95% of all three bedroom flats in Edinburgh have rents between £1601 and £2216.\n\n**(c)** We are 95% confident that the mean rent of all three bedroom flats is between £1601 and £2216.\n\n**(d)** We are 95% confident that the mean rent of three bedroom flats in this sample is between £1601 and £2216.\n\n# Accuracy vs. precision\n\n## Confidence level\n\n**We are 95% confident that ...**\n\n- Suppose we took many samples from the original population and built a 95% confidence interval based on each sample.\n- Then about 95% of those intervals would contain the true population parameter.\n\n## Commonly used confidence levels\n\n::: task\nWhich line (orange dash/dot, blue dash, green dot) represents which confidence level?\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](4-1-2-bootstrapping_files/figure-revealjs/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\n## Precision vs. accuracy\n\n::: task\nIf we want to be very certain that we capture the population parameter, should we use a wider or a narrower interval? What drawbacks are associated with using a wider interval?\n:::\n\n![](images/garfield.png)\n\n. . .\n\n::: task\nHow can we get best of both worlds -- high precision and high accuracy?\n:::\n\n## Changing confidence level\n\n::: task\nHow would you modify the following code to calculate a 90% confidence interval? \nHow would you modify it for a 99% confidence interval?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedi_3br |>\n  specify(response = rent) |>\n  generate(reps = 15000, type = \"bootstrap\") |>\n  calculate(stat = \"mean\") |>\n  get_ci(level = 0.95)\n```\n:::\n\n\n## Changing confidence level\n\n::: task\nHow would you modify the following code to calculate a 90% confidence interval? \nHow would you modify it for a 99% confidence interval?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nedi_3br |>\n  specify(response = rent) |>\n  generate(reps = 15000, type = \"bootstrap\") |>\n  calculate(stat = \"mean\") |>\n  get_ci(level = 0.90)\n```\n:::\n\n\n## Changing confidence level\n\n::: task\nHow would you modify the following code to calculate a 90% confidence interval? \nHow would you modify it for a 99% confidence interval?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nedi_3br |>\n  specify(response = rent) |>\n  generate(reps = 15000, type = \"bootstrap\") |>\n  calculate(stat = \"mean\") |>\n  get_ci(level = 0.99)\n```\n:::\n\n\n## Recap\n\n::: incremental\n- Sample statistic $\\ne$ population parameter, but if the sample is good, it can be a good estimate\n\n- We report the estimate with a confidence interval, and the width of this interval depends on the variability of sample statistics from different samples from the population\n\n- Since we can't continue sampling from the population, we bootstrap from the one sample we have to estimate sampling variability\n\n- We can do this for any sample statistic:\n  - For a mean: `calculate(stat = \"mean\")`\n  - For a median: `calculate(stat = \"median\")`\n  - Learn about calculating bootstrap intervals for other statistics in your homework\n:::\n",
    "supporting": [
      "4-1-2-bootstrapping_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}