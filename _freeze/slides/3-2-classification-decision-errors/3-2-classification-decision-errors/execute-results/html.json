{
  "hash": "32b93e95b380160246e15ffa25fd7ad3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Clasification and decision errors\"\nformat: revealjs\n---\n\n\n\n## Packages\n\n- **tidyverse** for data wrangling and visualization\n- **tidymodels** for modeling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\n```\n:::\n\n\n# Spam filters\n\n## Is the e-mail spam or not? {.smaller}\n\n::: {.columns}\n::: {.column width=\"20%\"}\n\n$\\mathbf{x}$: Word and character counts in an e-mail\n\n:::\n::: {.column width=\"50%\"}\n\n$$\ny\n= \n\\begin{cases}\n1 & \\text{it's spam}\\\\\n0 & \\text{it's legit}\n\\end{cases}\n$$\n\n:::\n:::\n\n::: {.columns}\n::: {.column width=70%}\n::: email\nSubject: Congratulations! You‚Äôve Been Selected for an Exclusive Reward üéÅ\n\nDear Customer,\n\nYou have been chosen as one of our preferred recipients to receive a special complimentary gift. This is our way of thanking you for your continued interest in our services.\n\nTo claim your reward, simply complete our short survey. Your participation takes only 60 seconds, and your prize will be shipped at no cost to you.\n\nClick here to start your survey and claim your reward\n[Claim Reward Link]\n\nThis exclusive offer is available for the next 48 hours only. Don‚Äôt miss your chance to enjoy this limited opportunity.\n\nWarm regards,  \nPromotions Team  \nExclusive Rewards Center\n:::\n:::\n::: {.column width=30%}\n:::\n:::\n\n::: aside\nSample spam email language generated by Chat GPT with the prompt \"Generate a fake ‚Äúpromotional‚Äù style spam email that doesn't contain any explicit words.\"\n:::\n\n## Prediction / clssification\n\n|                         | Email is spam       | Email is not spam            |\n|-------------------------|---------------------|------------------------------|\n| Email labelled spam     | [True positive]{.fragment fragment-index=1}      | [False positive (Type 1 error)]{.fragment fragment-index=3}|\n| Email labelled not spam | [False negative (Type 2 error)]{.fragment fragment-index=4} | [True negative]{.fragment fragment-index=2}            |\n\n. . .\n\n- False negative rate = P(Labelled not spam | Email spam) = FN / (TP + FN)\n\n- False positive rate = P(Labelled spam | Email not spam) = FP / (FP + TN)\n\n# Sensitivity and specificity\n\n|                         | Email is spam       | Email is not spam            |\n|-------------------------|---------------------|------------------------------|\n| Email labelled spam     | True positive       | False positive (Type 1 error)|\n| Email labelled not spam | False negative (Type 2 error)| True negative          |\n\n. . .\n\n- Sensitivity = P(Labelled spam | Email spam) = TP / (TP + FN)\n\n  - Sensitivity = 1 ‚àí False negative rate\n\n- Specificity = P(Labelled not spam | Email not spam) = TN / (FP + TN)\n\n  - Specificity = 1 ‚àí False positive rate\n\n. . .\n\n::: task \nIf you were designing a spam filter, would you want sensitivity and specificity to be high or low? What are the trade-offs associated with each decision?\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}